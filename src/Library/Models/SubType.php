<?php

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Library\Models;

use \ArrayAccess;
/**
 * SubType Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Spinen\ConnectWise\Library
 */
class SubType implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'inactive' => 'bool',
        'type_association_ids' => 'int[]',
        'add_all_types' => 'bool',
        'remove_all_types' => 'bool',
        'board_id' => 'int',
        '_info' => '\Spinen\ConnectWise\Library\Models\Metadata'
    );

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      *
      * @var string[]
      */
    static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'inactive' => 'inactive',
        'type_association_ids' => 'typeAssociationIds',
        'add_all_types' => 'addAllTypes',
        'remove_all_types' => 'removeAllTypes',
        'board_id' => 'boardId',
        '_info' => '_info'
    );

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      *
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'inactive' => 'setInactive',
        'type_association_ids' => 'setTypeAssociationIds',
        'add_all_types' => 'setAddAllTypes',
        'remove_all_types' => 'setRemoveAllTypes',
        'board_id' => 'setBoardId',
        '_info' => 'setInfo'
    );

    /**
      * Array of attributes to getter functions (for serialization of requests)
      *
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'inactive' => 'getInactive',
        'type_association_ids' => 'getTypeAssociationIds',
        'add_all_types' => 'getAddAllTypes',
        'remove_all_types' => 'getRemoveAllTypes',
        'board_id' => 'getBoardId',
        '_info' => 'getInfo'
    );

    
    /**
      * $id 
      *
      * @var int
      */
    protected $id;
    
    /**
      * $name 
      *
      * @var string
      */
    protected $name;
    
    /**
      * $inactive 
      *
      * @var bool
      */
    protected $inactive;
    
    /**
      * $type_association_ids 
      *
      * @var int[]
      */
    protected $type_association_ids;
    
    /**
      * $add_all_types 
      *
      * @var bool
      */
    protected $add_all_types;
    
    /**
      * $remove_all_types 
      *
      * @var bool
      */
    protected $remove_all_types;
    
    /**
      * $board_id 
      *
      * @var int
      */
    protected $board_id;
    
    /**
      * $_info 
      *
      * @var \Spinen\ConnectWise\Library\Models\Metadata
      */
    protected $_info;
    

    /**
     * New instance of SubType.
     *
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->name = $data["name"];
            $this->inactive = $data["inactive"];
            $this->type_association_ids = $data["type_association_ids"];
            $this->add_all_types = $data["add_all_types"];
            $this->remove_all_types = $data["remove_all_types"];
            $this->board_id = $data["board_id"];
            $this->_info = $data["_info"];
        }
    }
    
    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    { 
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    { 
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets inactive
     *
     * @return bool
     */
    public function getInactive()
    {
        return $this->inactive;
    }

    /**
     * Sets inactive
     *
     * @param bool $inactive 
     *
     * @return $this
     */
    public function setInactive($inactive)
    { 
        $this->inactive = $inactive;
        return $this;
    }
    
    /**
     * Gets type_association_ids
     *
     * @return int[]
     */
    public function getTypeAssociationIds()
    {
        return $this->type_association_ids;
    }

    /**
     * Sets type_association_ids
     *
     * @param int[] $type_association_ids 
     *
     * @return $this
     */
    public function setTypeAssociationIds($type_association_ids)
    { 
        $this->type_association_ids = $type_association_ids;
        return $this;
    }
    
    /**
     * Gets add_all_types
     *
     * @return bool
     */
    public function getAddAllTypes()
    {
        return $this->add_all_types;
    }

    /**
     * Sets add_all_types
     *
     * @param bool $add_all_types 
     *
     * @return $this
     */
    public function setAddAllTypes($add_all_types)
    { 
        $this->add_all_types = $add_all_types;
        return $this;
    }
    
    /**
     * Gets remove_all_types
     *
     * @return bool
     */
    public function getRemoveAllTypes()
    {
        return $this->remove_all_types;
    }

    /**
     * Sets remove_all_types
     *
     * @param bool $remove_all_types 
     *
     * @return $this
     */
    public function setRemoveAllTypes($remove_all_types)
    { 
        $this->remove_all_types = $remove_all_types;
        return $this;
    }
    
    /**
     * Gets board_id
     *
     * @return int
     */
    public function getBoardId()
    {
        return $this->board_id;
    }

    /**
     * Sets board_id
     *
     * @param int $board_id 
     *
     * @return $this
     */
    public function setBoardId($board_id)
    { 
        $this->board_id = $board_id;
        return $this;
    }
    
    /**
     * Gets _info
     *
     * @return \Spinen\ConnectWise\Library\Models\Metadata
     */
    public function getInfo()
    {
        return $this->_info;
    }

    /**
     * Sets _info
     *
     * @param \Spinen\ConnectWise\Library\Models\Metadata $_info 
     *
     * @return $this
     */
    public function setInfo($_info)
    { 
        $this->_info = $_info;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
