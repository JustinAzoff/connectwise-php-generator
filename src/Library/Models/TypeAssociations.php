<?php

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Library\Models;

use \ArrayAccess;
/**
 * TypeAssociations Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Spinen\ConnectWise\Library
 */
class TypeAssociations implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    static $swaggerTypes = array(
        'type_id' => 'int',
        'sub_type_association_ids' => 'int[]'
    );

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      *
      * @var string[]
      */
    static $attributeMap = array(
        'type_id' => 'typeId',
        'sub_type_association_ids' => 'subTypeAssociationIds'
    );

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      *
      * @var string[]
      */
    static $setters = array(
        'type_id' => 'setTypeId',
        'sub_type_association_ids' => 'setSubTypeAssociationIds'
    );

    /**
      * Array of attributes to getter functions (for serialization of requests)
      *
      * @var string[]
      */
    static $getters = array(
        'type_id' => 'getTypeId',
        'sub_type_association_ids' => 'getSubTypeAssociationIds'
    );

    
    /**
      * $type_id 
      *
      * @var int
      */
    protected $type_id;
    
    /**
      * $sub_type_association_ids 
      *
      * @var int[]
      */
    protected $sub_type_association_ids;
    

    /**
     * New instance of TypeAssociations.
     *
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->type_id = $data["type_id"];
            $this->sub_type_association_ids = $data["sub_type_association_ids"];
        }
    }
    
    /**
     * Gets type_id
     *
     * @return int
     */
    public function getTypeId()
    {
        return $this->type_id;
    }

    /**
     * Sets type_id
     *
     * @param int $type_id 
     *
     * @return $this
     */
    public function setTypeId($type_id)
    { 
        $this->type_id = $type_id;
        return $this;
    }
    
    /**
     * Gets sub_type_association_ids
     *
     * @return int[]
     */
    public function getSubTypeAssociationIds()
    {
        return $this->sub_type_association_ids;
    }

    /**
     * Sets sub_type_association_ids
     *
     * @param int[] $sub_type_association_ids 
     *
     * @return $this
     */
    public function setSubTypeAssociationIds($sub_type_association_ids)
    { 
        $this->sub_type_association_ids = $sub_type_association_ids;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
