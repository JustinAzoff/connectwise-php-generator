<?php

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Library\Models;

use \ArrayAccess;
/**
 * ServiceNote Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Spinen\ConnectWise\Library
 */
class ServiceNote implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'ticket_id' => 'int',
        'text' => 'string',
        'detail_description_flag' => 'bool',
        'internal_analysis_flag' => 'bool',
        'resolution_flag' => 'bool',
        'member' => '\Spinen\ConnectWise\Library\Models\MemberReference',
        'contact' => '\Spinen\ConnectWise\Library\Models\ContactReference',
        'customer_updated_flag' => 'bool',
        'process_notifications' => 'bool',
        'date_created' => 'string',
        'created_by' => 'string',
        'internal_flag' => 'bool',
        'external_flag' => 'bool',
        '_info' => '\Spinen\ConnectWise\Library\Models\Metadata'
    );

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      *
      * @var string[]
      */
    static $attributeMap = array(
        'id' => 'id',
        'ticket_id' => 'ticketId',
        'text' => 'text',
        'detail_description_flag' => 'detailDescriptionFlag',
        'internal_analysis_flag' => 'internalAnalysisFlag',
        'resolution_flag' => 'resolutionFlag',
        'member' => 'member',
        'contact' => 'contact',
        'customer_updated_flag' => 'customerUpdatedFlag',
        'process_notifications' => 'processNotifications',
        'date_created' => 'dateCreated',
        'created_by' => 'createdBy',
        'internal_flag' => 'internalFlag',
        'external_flag' => 'externalFlag',
        '_info' => '_info'
    );

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      *
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'ticket_id' => 'setTicketId',
        'text' => 'setText',
        'detail_description_flag' => 'setDetailDescriptionFlag',
        'internal_analysis_flag' => 'setInternalAnalysisFlag',
        'resolution_flag' => 'setResolutionFlag',
        'member' => 'setMember',
        'contact' => 'setContact',
        'customer_updated_flag' => 'setCustomerUpdatedFlag',
        'process_notifications' => 'setProcessNotifications',
        'date_created' => 'setDateCreated',
        'created_by' => 'setCreatedBy',
        'internal_flag' => 'setInternalFlag',
        'external_flag' => 'setExternalFlag',
        '_info' => 'setInfo'
    );

    /**
      * Array of attributes to getter functions (for serialization of requests)
      *
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'ticket_id' => 'getTicketId',
        'text' => 'getText',
        'detail_description_flag' => 'getDetailDescriptionFlag',
        'internal_analysis_flag' => 'getInternalAnalysisFlag',
        'resolution_flag' => 'getResolutionFlag',
        'member' => 'getMember',
        'contact' => 'getContact',
        'customer_updated_flag' => 'getCustomerUpdatedFlag',
        'process_notifications' => 'getProcessNotifications',
        'date_created' => 'getDateCreated',
        'created_by' => 'getCreatedBy',
        'internal_flag' => 'getInternalFlag',
        'external_flag' => 'getExternalFlag',
        '_info' => 'getInfo'
    );

    
    /**
      * $id 
      *
      * @var int
      */
    protected $id;
    
    /**
      * $ticket_id 
      *
      * @var int
      */
    protected $ticket_id;
    
    /**
      * $text 
      *
      * @var string
      */
    protected $text;
    
    /**
      * $detail_description_flag 
      *
      * @var bool
      */
    protected $detail_description_flag;
    
    /**
      * $internal_analysis_flag 
      *
      * @var bool
      */
    protected $internal_analysis_flag;
    
    /**
      * $resolution_flag 
      *
      * @var bool
      */
    protected $resolution_flag;
    
    /**
      * $member 
      *
      * @var \Spinen\ConnectWise\Library\Models\MemberReference
      */
    protected $member;
    
    /**
      * $contact 
      *
      * @var \Spinen\ConnectWise\Library\Models\ContactReference
      */
    protected $contact;
    
    /**
      * $customer_updated_flag 
      *
      * @var bool
      */
    protected $customer_updated_flag;
    
    /**
      * $process_notifications 
      *
      * @var bool
      */
    protected $process_notifications;
    
    /**
      * $date_created 
      *
      * @var string
      */
    protected $date_created;
    
    /**
      * $created_by 
      *
      * @var string
      */
    protected $created_by;
    
    /**
      * $internal_flag 
      *
      * @var bool
      */
    protected $internal_flag;
    
    /**
      * $external_flag 
      *
      * @var bool
      */
    protected $external_flag;
    
    /**
      * $_info 
      *
      * @var \Spinen\ConnectWise\Library\Models\Metadata
      */
    protected $_info;
    

    /**
     * New instance of ServiceNote.
     *
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->ticket_id = $data["ticket_id"];
            $this->text = $data["text"];
            $this->detail_description_flag = $data["detail_description_flag"];
            $this->internal_analysis_flag = $data["internal_analysis_flag"];
            $this->resolution_flag = $data["resolution_flag"];
            $this->member = $data["member"];
            $this->contact = $data["contact"];
            $this->customer_updated_flag = $data["customer_updated_flag"];
            $this->process_notifications = $data["process_notifications"];
            $this->date_created = $data["date_created"];
            $this->created_by = $data["created_by"];
            $this->internal_flag = $data["internal_flag"];
            $this->external_flag = $data["external_flag"];
            $this->_info = $data["_info"];
        }
    }
    
    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    { 
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets ticket_id
     *
     * @return int
     */
    public function getTicketId()
    {
        return $this->ticket_id;
    }

    /**
     * Sets ticket_id
     *
     * @param int $ticket_id 
     *
     * @return $this
     */
    public function setTicketId($ticket_id)
    { 
        $this->ticket_id = $ticket_id;
        return $this;
    }
    
    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->text;
    }

    /**
     * Sets text
     *
     * @param string $text 
     *
     * @return $this
     */
    public function setText($text)
    { 
        $this->text = $text;
        return $this;
    }
    
    /**
     * Gets detail_description_flag
     *
     * @return bool
     */
    public function getDetailDescriptionFlag()
    {
        return $this->detail_description_flag;
    }

    /**
     * Sets detail_description_flag
     *
     * @param bool $detail_description_flag 
     *
     * @return $this
     */
    public function setDetailDescriptionFlag($detail_description_flag)
    { 
        $this->detail_description_flag = $detail_description_flag;
        return $this;
    }
    
    /**
     * Gets internal_analysis_flag
     *
     * @return bool
     */
    public function getInternalAnalysisFlag()
    {
        return $this->internal_analysis_flag;
    }

    /**
     * Sets internal_analysis_flag
     *
     * @param bool $internal_analysis_flag 
     *
     * @return $this
     */
    public function setInternalAnalysisFlag($internal_analysis_flag)
    { 
        $this->internal_analysis_flag = $internal_analysis_flag;
        return $this;
    }
    
    /**
     * Gets resolution_flag
     *
     * @return bool
     */
    public function getResolutionFlag()
    {
        return $this->resolution_flag;
    }

    /**
     * Sets resolution_flag
     *
     * @param bool $resolution_flag 
     *
     * @return $this
     */
    public function setResolutionFlag($resolution_flag)
    { 
        $this->resolution_flag = $resolution_flag;
        return $this;
    }
    
    /**
     * Gets member
     *
     * @return \Spinen\ConnectWise\Library\Models\MemberReference
     */
    public function getMember()
    {
        return $this->member;
    }

    /**
     * Sets member
     *
     * @param \Spinen\ConnectWise\Library\Models\MemberReference $member 
     *
     * @return $this
     */
    public function setMember($member)
    { 
        $this->member = $member;
        return $this;
    }
    
    /**
     * Gets contact
     *
     * @return \Spinen\ConnectWise\Library\Models\ContactReference
     */
    public function getContact()
    {
        return $this->contact;
    }

    /**
     * Sets contact
     *
     * @param \Spinen\ConnectWise\Library\Models\ContactReference $contact 
     *
     * @return $this
     */
    public function setContact($contact)
    { 
        $this->contact = $contact;
        return $this;
    }
    
    /**
     * Gets customer_updated_flag
     *
     * @return bool
     */
    public function getCustomerUpdatedFlag()
    {
        return $this->customer_updated_flag;
    }

    /**
     * Sets customer_updated_flag
     *
     * @param bool $customer_updated_flag 
     *
     * @return $this
     */
    public function setCustomerUpdatedFlag($customer_updated_flag)
    { 
        $this->customer_updated_flag = $customer_updated_flag;
        return $this;
    }
    
    /**
     * Gets process_notifications
     *
     * @return bool
     */
    public function getProcessNotifications()
    {
        return $this->process_notifications;
    }

    /**
     * Sets process_notifications
     *
     * @param bool $process_notifications 
     *
     * @return $this
     */
    public function setProcessNotifications($process_notifications)
    { 
        $this->process_notifications = $process_notifications;
        return $this;
    }
    
    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->date_created;
    }

    /**
     * Sets date_created
     *
     * @param string $date_created 
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    { 
        $this->date_created = $date_created;
        return $this;
    }
    
    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->created_by;
    }

    /**
     * Sets created_by
     *
     * @param string $created_by 
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    { 
        $this->created_by = $created_by;
        return $this;
    }
    
    /**
     * Gets internal_flag
     *
     * @return bool
     */
    public function getInternalFlag()
    {
        return $this->internal_flag;
    }

    /**
     * Sets internal_flag
     *
     * @param bool $internal_flag 
     *
     * @return $this
     */
    public function setInternalFlag($internal_flag)
    { 
        $this->internal_flag = $internal_flag;
        return $this;
    }
    
    /**
     * Gets external_flag
     *
     * @return bool
     */
    public function getExternalFlag()
    {
        return $this->external_flag;
    }

    /**
     * Sets external_flag
     *
     * @param bool $external_flag 
     *
     * @return $this
     */
    public function setExternalFlag($external_flag)
    { 
        $this->external_flag = $external_flag;
        return $this;
    }
    
    /**
     * Gets _info
     *
     * @return \Spinen\ConnectWise\Library\Models\Metadata
     */
    public function getInfo()
    {
        return $this->_info;
    }

    /**
     * Sets _info
     *
     * @param \Spinen\ConnectWise\Library\Models\Metadata $_info 
     *
     * @return $this
     */
    public function setInfo($_info)
    { 
        $this->_info = $_info;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
