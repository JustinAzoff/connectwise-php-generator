<?php

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Library\Models;

use \ArrayAccess;
/**
 * Error Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Spinen\ConnectWise\Library
 */
class Error implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    static $swaggerTypes = array(
        'code' => 'string',
        'message' => 'string',
        'errors' => '\Spinen\ConnectWise\Library\Models\ValidationError[]'
    );

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      *
      * @var string[]
      */
    static $attributeMap = array(
        'code' => 'code',
        'message' => 'message',
        'errors' => 'errors'
    );

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      *
      * @var string[]
      */
    static $setters = array(
        'code' => 'setCode',
        'message' => 'setMessage',
        'errors' => 'setErrors'
    );

    /**
      * Array of attributes to getter functions (for serialization of requests)
      *
      * @var string[]
      */
    static $getters = array(
        'code' => 'getCode',
        'message' => 'getMessage',
        'errors' => 'getErrors'
    );

    
    /**
      * $code 
      *
      * @var string
      */
    protected $code;
    
    /**
      * $message 
      *
      * @var string
      */
    protected $message;
    
    /**
      * $errors 
      *
      * @var \Spinen\ConnectWise\Library\Models\ValidationError[]
      */
    protected $errors;
    

    /**
     * New instance of Error.
     *
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->code = $data["code"];
            $this->message = $data["message"];
            $this->errors = $data["errors"];
        }
    }
    
    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * Sets code
     *
     * @param string $code 
     *
     * @return $this
     */
    public function setCode($code)
    { 
        $this->code = $code;
        return $this;
    }
    
    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * Sets message
     *
     * @param string $message 
     *
     * @return $this
     */
    public function setMessage($message)
    { 
        $this->message = $message;
        return $this;
    }
    
    /**
     * Gets errors
     *
     * @return \Spinen\ConnectWise\Library\Models\ValidationError[]
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * Sets errors
     *
     * @param \Spinen\ConnectWise\Library\Models\ValidationError[] $errors 
     *
     * @return $this
     */
    public function setErrors($errors)
    { 
        $this->errors = $errors;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
