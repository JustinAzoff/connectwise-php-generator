<?php

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Library\Models;

use \ArrayAccess;
/**
 * SurveyQuestion Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Spinen\ConnectWise\Library
 */
class SurveyQuestion implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'sequence_number' => 'int',
        'type' => 'string',
        'question' => 'string',
        'options' => '\Spinen\ConnectWise\Library\Models\SurveyQuestionOption[]',
        'include_flag' => 'bool',
        'required_flag' => 'bool',
        'no_answer_points' => 'int',
        'survey_id' => 'int',
        '_info' => '\Spinen\ConnectWise\Library\Models\Metadata'
    );

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      *
      * @var string[]
      */
    static $attributeMap = array(
        'id' => 'id',
        'sequence_number' => 'sequenceNumber',
        'type' => 'type',
        'question' => 'question',
        'options' => 'options',
        'include_flag' => 'includeFlag',
        'required_flag' => 'requiredFlag',
        'no_answer_points' => 'noAnswerPoints',
        'survey_id' => 'surveyId',
        '_info' => '_info'
    );

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      *
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'sequence_number' => 'setSequenceNumber',
        'type' => 'setType',
        'question' => 'setQuestion',
        'options' => 'setOptions',
        'include_flag' => 'setIncludeFlag',
        'required_flag' => 'setRequiredFlag',
        'no_answer_points' => 'setNoAnswerPoints',
        'survey_id' => 'setSurveyId',
        '_info' => 'setInfo'
    );

    /**
      * Array of attributes to getter functions (for serialization of requests)
      *
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'sequence_number' => 'getSequenceNumber',
        'type' => 'getType',
        'question' => 'getQuestion',
        'options' => 'getOptions',
        'include_flag' => 'getIncludeFlag',
        'required_flag' => 'getRequiredFlag',
        'no_answer_points' => 'getNoAnswerPoints',
        'survey_id' => 'getSurveyId',
        '_info' => 'getInfo'
    );

    
    /**
      * $id 
      *
      * @var int
      */
    protected $id;
    
    /**
      * $sequence_number 
      *
      * @var int
      */
    protected $sequence_number;
    
    /**
      * $type 
      *
      * @var string
      */
    protected $type;
    
    /**
      * $question 
      *
      * @var string
      */
    protected $question;
    
    /**
      * $options 
      *
      * @var \Spinen\ConnectWise\Library\Models\SurveyQuestionOption[]
      */
    protected $options;
    
    /**
      * $include_flag 
      *
      * @var bool
      */
    protected $include_flag;
    
    /**
      * $required_flag 
      *
      * @var bool
      */
    protected $required_flag;
    
    /**
      * $no_answer_points 
      *
      * @var int
      */
    protected $no_answer_points;
    
    /**
      * $survey_id 
      *
      * @var int
      */
    protected $survey_id;
    
    /**
      * $_info 
      *
      * @var \Spinen\ConnectWise\Library\Models\Metadata
      */
    protected $_info;
    

    /**
     * New instance of SurveyQuestion.
     *
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->sequence_number = $data["sequence_number"];
            $this->type = $data["type"];
            $this->question = $data["question"];
            $this->options = $data["options"];
            $this->include_flag = $data["include_flag"];
            $this->required_flag = $data["required_flag"];
            $this->no_answer_points = $data["no_answer_points"];
            $this->survey_id = $data["survey_id"];
            $this->_info = $data["_info"];
        }
    }
    
    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    { 
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets sequence_number
     *
     * @return int
     */
    public function getSequenceNumber()
    {
        return $this->sequence_number;
    }

    /**
     * Sets sequence_number
     *
     * @param int $sequence_number 
     *
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    { 
        $this->sequence_number = $sequence_number;
        return $this;
    }
    
    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type
     *
     * @param string $type 
     *
     * @return $this
     */
    public function setType($type)
    { 
        $allowed_values = array("OpenEnded", "Selection");
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException(sprintf("Invalid value [%s] for 'type', must be one of 'OpenEnded', 'Selection'", $type));
        }
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets question
     *
     * @return string
     */
    public function getQuestion()
    {
        return $this->question;
    }

    /**
     * Sets question
     *
     * @param string $question 
     *
     * @return $this
     */
    public function setQuestion($question)
    { 
        $this->question = $question;
        return $this;
    }
    
    /**
     * Gets options
     *
     * @return \Spinen\ConnectWise\Library\Models\SurveyQuestionOption[]
     */
    public function getOptions()
    {
        return $this->options;
    }

    /**
     * Sets options
     *
     * @param \Spinen\ConnectWise\Library\Models\SurveyQuestionOption[] $options 
     *
     * @return $this
     */
    public function setOptions($options)
    { 
        $this->options = $options;
        return $this;
    }
    
    /**
     * Gets include_flag
     *
     * @return bool
     */
    public function getIncludeFlag()
    {
        return $this->include_flag;
    }

    /**
     * Sets include_flag
     *
     * @param bool $include_flag 
     *
     * @return $this
     */
    public function setIncludeFlag($include_flag)
    { 
        $this->include_flag = $include_flag;
        return $this;
    }
    
    /**
     * Gets required_flag
     *
     * @return bool
     */
    public function getRequiredFlag()
    {
        return $this->required_flag;
    }

    /**
     * Sets required_flag
     *
     * @param bool $required_flag 
     *
     * @return $this
     */
    public function setRequiredFlag($required_flag)
    { 
        $this->required_flag = $required_flag;
        return $this;
    }
    
    /**
     * Gets no_answer_points
     *
     * @return int
     */
    public function getNoAnswerPoints()
    {
        return $this->no_answer_points;
    }

    /**
     * Sets no_answer_points
     *
     * @param int $no_answer_points 
     *
     * @return $this
     */
    public function setNoAnswerPoints($no_answer_points)
    { 
        $this->no_answer_points = $no_answer_points;
        return $this;
    }
    
    /**
     * Gets survey_id
     *
     * @return int
     */
    public function getSurveyId()
    {
        return $this->survey_id;
    }

    /**
     * Sets survey_id
     *
     * @param int $survey_id 
     *
     * @return $this
     */
    public function setSurveyId($survey_id)
    { 
        $this->survey_id = $survey_id;
        return $this;
    }
    
    /**
     * Gets _info
     *
     * @return \Spinen\ConnectWise\Library\Models\Metadata
     */
    public function getInfo()
    {
        return $this->_info;
    }

    /**
     * Sets _info
     *
     * @param \Spinen\ConnectWise\Library\Models\Metadata $_info 
     *
     * @return $this
     */
    public function setInfo($_info)
    { 
        $this->_info = $_info;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
