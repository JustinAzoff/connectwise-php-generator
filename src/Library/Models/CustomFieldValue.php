<?php

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Library\Models;

use \ArrayAccess;
/**
 * CustomFieldValue Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Spinen\ConnectWise\Library
 */
class CustomFieldValue implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'caption' => 'string',
        'type' => 'string',
        'entry_method' => 'string',
        'number_of_decimals' => 'int',
        'value' => 'string'
    );

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      *
      * @var string[]
      */
    static $attributeMap = array(
        'id' => 'id',
        'caption' => 'caption',
        'type' => 'type',
        'entry_method' => 'entryMethod',
        'number_of_decimals' => 'numberOfDecimals',
        'value' => 'value'
    );

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      *
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'caption' => 'setCaption',
        'type' => 'setType',
        'entry_method' => 'setEntryMethod',
        'number_of_decimals' => 'setNumberOfDecimals',
        'value' => 'setValue'
    );

    /**
      * Array of attributes to getter functions (for serialization of requests)
      *
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'caption' => 'getCaption',
        'type' => 'getType',
        'entry_method' => 'getEntryMethod',
        'number_of_decimals' => 'getNumberOfDecimals',
        'value' => 'getValue'
    );

    
    /**
      * $id 
      *
      * @var int
      */
    protected $id;
    
    /**
      * $caption 
      *
      * @var string
      */
    protected $caption;
    
    /**
      * $type 
      *
      * @var string
      */
    protected $type;
    
    /**
      * $entry_method 
      *
      * @var string
      */
    protected $entry_method;
    
    /**
      * $number_of_decimals 
      *
      * @var int
      */
    protected $number_of_decimals;
    
    /**
      * $value 
      *
      * @var string
      */
    protected $value;
    

    /**
     * New instance of CustomFieldValue.
     *
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->caption = $data["caption"];
            $this->type = $data["type"];
            $this->entry_method = $data["entry_method"];
            $this->number_of_decimals = $data["number_of_decimals"];
            $this->value = $data["value"];
        }
    }
    
    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    { 
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets caption
     *
     * @return string
     */
    public function getCaption()
    {
        return $this->caption;
    }

    /**
     * Sets caption
     *
     * @param string $caption 
     *
     * @return $this
     */
    public function setCaption($caption)
    { 
        $this->caption = $caption;
        return $this;
    }
    
    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type
     *
     * @param string $type 
     *
     * @return $this
     */
    public function setType($type)
    { 
        $allowed_values = array("Text", "Button", "Currency", "Date", "Hyperlink", "IPAddress", "Checkbox", "Number", "Percent", "TextArea", "Password");
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'Text', 'Button', 'Currency', 'Date', 'Hyperlink', 'IPAddress', 'Checkbox', 'Number', 'Percent', 'TextArea', 'Password'");
        }
        $this->type = $type;
        return $this;
    }
    
    /**
     * Gets entry_method
     *
     * @return string
     */
    public function getEntryMethod()
    {
        return $this->entry_method;
    }

    /**
     * Sets entry_method
     *
     * @param string $entry_method 
     *
     * @return $this
     */
    public function setEntryMethod($entry_method)
    { 
        $allowed_values = array("EntryField", "List", "Option");
        if (!in_array($entry_method, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'entry_method', must be one of 'EntryField', 'List', 'Option'");
        }
        $this->entry_method = $entry_method;
        return $this;
    }
    
    /**
     * Gets number_of_decimals
     *
     * @return int
     */
    public function getNumberOfDecimals()
    {
        return $this->number_of_decimals;
    }

    /**
     * Sets number_of_decimals
     *
     * @param int $number_of_decimals 
     *
     * @return $this
     */
    public function setNumberOfDecimals($number_of_decimals)
    { 
        $this->number_of_decimals = $number_of_decimals;
        return $this;
    }
    
    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * Sets value
     *
     * @param string $value 
     *
     * @return $this
     */
    public function setValue($value)
    { 
        $this->value = $value;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
