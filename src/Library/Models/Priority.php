<?php

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Library\Models;

use \ArrayAccess;
/**
 * Priority Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Spinen\ConnectWise\Library
 */
class Priority implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'color' => 'string',
        'sort_order' => 'int',
        'default_flag' => 'bool',
        'image_link' => 'string',
        '_info' => '\Spinen\ConnectWise\Library\Models\Metadata'
    );

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      *
      * @var string[]
      */
    static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'color' => 'color',
        'sort_order' => 'sortOrder',
        'default_flag' => 'defaultFlag',
        'image_link' => 'imageLink',
        '_info' => '_info'
    );

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      *
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'color' => 'setColor',
        'sort_order' => 'setSortOrder',
        'default_flag' => 'setDefaultFlag',
        'image_link' => 'setImageLink',
        '_info' => 'setInfo'
    );

    /**
      * Array of attributes to getter functions (for serialization of requests)
      *
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'color' => 'getColor',
        'sort_order' => 'getSortOrder',
        'default_flag' => 'getDefaultFlag',
        'image_link' => 'getImageLink',
        '_info' => 'getInfo'
    );

    
    /**
      * $id 
      *
      * @var int
      */
    protected $id;
    
    /**
      * $name 
      *
      * @var string
      */
    protected $name;
    
    /**
      * $color 
      *
      * @var string
      */
    protected $color;
    
    /**
      * $sort_order 
      *
      * @var int
      */
    protected $sort_order;
    
    /**
      * $default_flag 
      *
      * @var bool
      */
    protected $default_flag;
    
    /**
      * $image_link 
      *
      * @var string
      */
    protected $image_link;
    
    /**
      * $_info 
      *
      * @var \Spinen\ConnectWise\Library\Models\Metadata
      */
    protected $_info;
    

    /**
     * New instance of Priority.
     *
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->name = $data["name"];
            $this->color = $data["color"];
            $this->sort_order = $data["sort_order"];
            $this->default_flag = $data["default_flag"];
            $this->image_link = $data["image_link"];
            $this->_info = $data["_info"];
        }
    }
    
    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    { 
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name
     *
     * @param string $name 
     *
     * @return $this
     */
    public function setName($name)
    { 
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->color;
    }

    /**
     * Sets color
     *
     * @param string $color 
     *
     * @return $this
     */
    public function setColor($color)
    { 
        $this->color = $color;
        return $this;
    }
    
    /**
     * Gets sort_order
     *
     * @return int
     */
    public function getSortOrder()
    {
        return $this->sort_order;
    }

    /**
     * Sets sort_order
     *
     * @param int $sort_order 
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    { 
        $this->sort_order = $sort_order;
        return $this;
    }
    
    /**
     * Gets default_flag
     *
     * @return bool
     */
    public function getDefaultFlag()
    {
        return $this->default_flag;
    }

    /**
     * Sets default_flag
     *
     * @param bool $default_flag 
     *
     * @return $this
     */
    public function setDefaultFlag($default_flag)
    { 
        $this->default_flag = $default_flag;
        return $this;
    }
    
    /**
     * Gets image_link
     *
     * @return string
     */
    public function getImageLink()
    {
        return $this->image_link;
    }

    /**
     * Sets image_link
     *
     * @param string $image_link 
     *
     * @return $this
     */
    public function setImageLink($image_link)
    { 
        $this->image_link = $image_link;
        return $this;
    }
    
    /**
     * Gets _info
     *
     * @return \Spinen\ConnectWise\Library\Models\Metadata
     */
    public function getInfo()
    {
        return $this->_info;
    }

    /**
     * Sets _info
     *
     * @param \Spinen\ConnectWise\Library\Models\Metadata $_info 
     *
     * @return $this
     */
    public function setInfo($_info)
    { 
        $this->_info = $_info;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
