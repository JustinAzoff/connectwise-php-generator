<?php

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Library\Models;

use \ArrayAccess;
/**
 * Task Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Spinen\ConnectWise\Library
 */
class Task implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'ticket_id' => 'int',
        'notes' => 'string',
        'closed_flag' => 'bool',
        'priority' => 'int',
        'schedule' => '\Spinen\ConnectWise\Library\Models\ScheduleEntryReference',
        'code' => '\Spinen\ConnectWise\Library\Models\ServiceCodeReference',
        'resolution' => 'string',
        'child_schedule_action' => 'string',
        'child_ticket_id' => 'int',
        '_info' => '\Spinen\ConnectWise\Library\Models\Metadata'
    );

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      *
      * @var string[]
      */
    static $attributeMap = array(
        'id' => 'id',
        'ticket_id' => 'ticketId',
        'notes' => 'notes',
        'closed_flag' => 'closedFlag',
        'priority' => 'priority',
        'schedule' => 'schedule',
        'code' => 'code',
        'resolution' => 'resolution',
        'child_schedule_action' => 'childScheduleAction',
        'child_ticket_id' => 'childTicketId',
        '_info' => '_info'
    );

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      *
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'ticket_id' => 'setTicketId',
        'notes' => 'setNotes',
        'closed_flag' => 'setClosedFlag',
        'priority' => 'setPriority',
        'schedule' => 'setSchedule',
        'code' => 'setCode',
        'resolution' => 'setResolution',
        'child_schedule_action' => 'setChildScheduleAction',
        'child_ticket_id' => 'setChildTicketId',
        '_info' => 'setInfo'
    );

    /**
      * Array of attributes to getter functions (for serialization of requests)
      *
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'ticket_id' => 'getTicketId',
        'notes' => 'getNotes',
        'closed_flag' => 'getClosedFlag',
        'priority' => 'getPriority',
        'schedule' => 'getSchedule',
        'code' => 'getCode',
        'resolution' => 'getResolution',
        'child_schedule_action' => 'getChildScheduleAction',
        'child_ticket_id' => 'getChildTicketId',
        '_info' => 'getInfo'
    );

    
    /**
      * $id 
      *
      * @var int
      */
    protected $id;
    
    /**
      * $ticket_id 
      *
      * @var int
      */
    protected $ticket_id;
    
    /**
      * $notes 
      *
      * @var string
      */
    protected $notes;
    
    /**
      * $closed_flag 
      *
      * @var bool
      */
    protected $closed_flag;
    
    /**
      * $priority 
      *
      * @var int
      */
    protected $priority;
    
    /**
      * $schedule 
      *
      * @var \Spinen\ConnectWise\Library\Models\ScheduleEntryReference
      */
    protected $schedule;
    
    /**
      * $code 
      *
      * @var \Spinen\ConnectWise\Library\Models\ServiceCodeReference
      */
    protected $code;
    
    /**
      * $resolution 
      *
      * @var string
      */
    protected $resolution;
    
    /**
      * $child_schedule_action 
      *
      * @var string
      */
    protected $child_schedule_action;
    
    /**
      * $child_ticket_id 
      *
      * @var int
      */
    protected $child_ticket_id;
    
    /**
      * $_info 
      *
      * @var \Spinen\ConnectWise\Library\Models\Metadata
      */
    protected $_info;
    

    /**
     * New instance of Task.
     *
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->ticket_id = $data["ticket_id"];
            $this->notes = $data["notes"];
            $this->closed_flag = $data["closed_flag"];
            $this->priority = $data["priority"];
            $this->schedule = $data["schedule"];
            $this->code = $data["code"];
            $this->resolution = $data["resolution"];
            $this->child_schedule_action = $data["child_schedule_action"];
            $this->child_ticket_id = $data["child_ticket_id"];
            $this->_info = $data["_info"];
        }
    }
    
    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id
     *
     * @param int $id 
     *
     * @return $this
     */
    public function setId($id)
    { 
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets ticket_id
     *
     * @return int
     */
    public function getTicketId()
    {
        return $this->ticket_id;
    }

    /**
     * Sets ticket_id
     *
     * @param int $ticket_id 
     *
     * @return $this
     */
    public function setTicketId($ticket_id)
    { 
        $this->ticket_id = $ticket_id;
        return $this;
    }
    
    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->notes;
    }

    /**
     * Sets notes
     *
     * @param string $notes 
     *
     * @return $this
     */
    public function setNotes($notes)
    { 
        $this->notes = $notes;
        return $this;
    }
    
    /**
     * Gets closed_flag
     *
     * @return bool
     */
    public function getClosedFlag()
    {
        return $this->closed_flag;
    }

    /**
     * Sets closed_flag
     *
     * @param bool $closed_flag 
     *
     * @return $this
     */
    public function setClosedFlag($closed_flag)
    { 
        $this->closed_flag = $closed_flag;
        return $this;
    }
    
    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->priority;
    }

    /**
     * Sets priority
     *
     * @param int $priority 
     *
     * @return $this
     */
    public function setPriority($priority)
    { 
        $this->priority = $priority;
        return $this;
    }
    
    /**
     * Gets schedule
     *
     * @return \Spinen\ConnectWise\Library\Models\ScheduleEntryReference
     */
    public function getSchedule()
    {
        return $this->schedule;
    }

    /**
     * Sets schedule
     *
     * @param \Spinen\ConnectWise\Library\Models\ScheduleEntryReference $schedule 
     *
     * @return $this
     */
    public function setSchedule($schedule)
    { 
        $this->schedule = $schedule;
        return $this;
    }
    
    /**
     * Gets code
     *
     * @return \Spinen\ConnectWise\Library\Models\ServiceCodeReference
     */
    public function getCode()
    {
        return $this->code;
    }

    /**
     * Sets code
     *
     * @param \Spinen\ConnectWise\Library\Models\ServiceCodeReference $code 
     *
     * @return $this
     */
    public function setCode($code)
    { 
        $this->code = $code;
        return $this;
    }
    
    /**
     * Gets resolution
     *
     * @return string
     */
    public function getResolution()
    {
        return $this->resolution;
    }

    /**
     * Sets resolution
     *
     * @param string $resolution 
     *
     * @return $this
     */
    public function setResolution($resolution)
    { 
        $this->resolution = $resolution;
        return $this;
    }
    
    /**
     * Gets child_schedule_action
     *
     * @return string
     */
    public function getChildScheduleAction()
    {
        return $this->child_schedule_action;
    }

    /**
     * Sets child_schedule_action
     *
     * @param string $child_schedule_action 
     *
     * @return $this
     */
    public function setChildScheduleAction($child_schedule_action)
    { 
        $allowed_values = array("Transfer", "Delete", "Done");
        if (!in_array($child_schedule_action, $allowed_values)) {
            throw new \InvalidArgumentException(sprintf("Invalid value [%s] for 'child_schedule_action', must be one of 'Transfer', 'Delete', 'Done'", $child_schedule_action));
        }
        $this->child_schedule_action = $child_schedule_action;
        return $this;
    }
    
    /**
     * Gets child_ticket_id
     *
     * @return int
     */
    public function getChildTicketId()
    {
        return $this->child_ticket_id;
    }

    /**
     * Sets child_ticket_id
     *
     * @param int $child_ticket_id 
     *
     * @return $this
     */
    public function setChildTicketId($child_ticket_id)
    { 
        $this->child_ticket_id = $child_ticket_id;
        return $this;
    }
    
    /**
     * Gets _info
     *
     * @return \Spinen\ConnectWise\Library\Models\Metadata
     */
    public function getInfo()
    {
        return $this->_info;
    }

    /**
     * Sets _info
     *
     * @param \Spinen\ConnectWise\Library\Models\Metadata $_info 
     *
     * @return $this
     */
    public function setInfo($_info)
    { 
        $this->_info = $_info;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
