<?php

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Library\Models;

use \ArrayAccess;
/**
 * SurveyQuestionOption Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Spinen\ConnectWise\Library
 */
class SurveyQuestionOption implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    static $swaggerTypes = array(
        'include_flag' => 'bool',
        'caption' => 'string',
        'points' => 'int'
    );

    /**
      * Array of attributes where the key is the local name, and the value is the original name
      *
      * @var string[]
      */
    static $attributeMap = array(
        'include_flag' => 'includeFlag',
        'caption' => 'caption',
        'points' => 'points'
    );

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      *
      * @var string[]
      */
    static $setters = array(
        'include_flag' => 'setIncludeFlag',
        'caption' => 'setCaption',
        'points' => 'setPoints'
    );

    /**
      * Array of attributes to getter functions (for serialization of requests)
      *
      * @var string[]
      */
    static $getters = array(
        'include_flag' => 'getIncludeFlag',
        'caption' => 'getCaption',
        'points' => 'getPoints'
    );

    
    /**
      * $include_flag 
      *
      * @var bool
      */
    protected $include_flag;
    
    /**
      * $caption 
      *
      * @var string
      */
    protected $caption;
    
    /**
      * $points 
      *
      * @var int
      */
    protected $points;
    

    /**
     * New instance of SurveyQuestionOption.
     *
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->include_flag = $data["include_flag"];
            $this->caption = $data["caption"];
            $this->points = $data["points"];
        }
    }
    
    /**
     * Gets include_flag
     *
     * @return bool
     */
    public function getIncludeFlag()
    {
        return $this->include_flag;
    }

    /**
     * Sets include_flag
     *
     * @param bool $include_flag 
     *
     * @return $this
     */
    public function setIncludeFlag($include_flag)
    { 
        $this->include_flag = $include_flag;
        return $this;
    }
    
    /**
     * Gets caption
     *
     * @return string
     */
    public function getCaption()
    {
        return $this->caption;
    }

    /**
     * Sets caption
     *
     * @param string $caption 
     *
     * @return $this
     */
    public function setCaption($caption)
    { 
        $this->caption = $caption;
        return $this;
    }
    
    /**
     * Gets points
     *
     * @return int
     */
    public function getPoints()
    {
        return $this->points;
    }

    /**
     * Sets points
     *
     * @param int $points 
     *
     * @return $this
     */
    public function setPoints($points)
    { 
        $this->points = $points;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
